const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

const JWT_SECRET = "role_secret_key";

// Sample users (simulating database)
const users = [
  { username: "adminUser", password: "admin123", role: "Admin" },
  { username: "modUser", password: "mod123", role: "Moderator" },
  { username: "normalUser", password: "user123", role: "User" },
];

// 1️⃣ LOGIN ROUTE — Generates token with role
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  const user = users.find(
    (u) => u.username === username && u.password === password
  );

  if (!user)
    return res.status(401).json({ message: "Invalid username or password" });

  const token = jwt.sign(
    { username: user.username, role: user.role },
    JWT_SECRET,
    { expiresIn: "1h" }
  );

  res.json({
    message: `Login successful as ${user.role}`,
    token,
  });
});

// 2️⃣ Middleware: Verify JWT
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  if (!authHeader)
    return res.status(403).json({ message: "No token provided" });

  const token = authHeader.split(" ")[1];
  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err)
      return res.status(401).json({ message: "Invalid or expired token" });

    req.user = decoded; // Attach user info to request
    next();
  });
}

// 3️⃣ Middleware: Role Authorization
function authorizeRoles(...allowedRoles) {
  return (req, res, next) => {
    if (!allowedRoles.includes(req.user.role)) {
      return res
        .status(403)
        .json({ message: `Access denied for role: ${req.user.role}` });
    }
    next();
  };
}

// 4️⃣ PROTECTED ROUTES
app.get("/profile", verifyToken, (req, res) => {
  res.json({
    message: `Welcome ${req.user.username}! You are logged in as ${req.user.role}.`,
  });
});

app.get("/admin", verifyToken, authorizeRoles("Admin"), (req, res) => {
  res.json({
    message: "Welcome to the Admin Dashboard! Only admins can access this.",
  });
});

app.get("/moderator", verifyToken, authorizeRoles("Moderator", "Admin"), (req, res) => {
  res.json({
    message: "Welcome to the Moderator Panel! Admins and Moderators can view this.",
  });
});

app.get("/", (req, res) => {
  res.send("Public Route — No Authentication Required");
});

// Start server
app.listen(5000, () => console.log("Server running on http://localhost:5000"));
