const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for signing the token (keep this safe in env in real apps)
const JWT_SECRET = "my_secret_key";

// Sample hardcoded user
const user = {
  username: "admin",
  password: "12345",
};

// 1️⃣ Login route – generates JWT on valid credentials
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  // Validate credentials
  if (username === user.username && password === user.password) {
    // Create a token valid for 1 hour
    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: "1h" });
    return res.json({ message: "Login successful", token });
  } else {
    return res.status(401).json({ message: "Invalid credentials" });
  }
});

// 2️⃣ Middleware to verify JWT token
function verifyToken(req, res, next) {
  const authHeader = req.headers["authorization"];

  if (!authHeader) return res.status(403).json({ message: "No token provided" });

  const token = authHeader.split(" ")[1]; // Get token from "Bearer <token>"

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ message: "Invalid or expired token" });
    req.user = decoded;
    next();
  });
}

// 3️⃣ Protected route
app.get("/dashboard", verifyToken, (req, res) => {
  res.json({
    message: `Welcome, ${req.user.username}! This is your protected dashboard.`,
  });
});

// 4️⃣ Public route
app.get("/", (req, res) => {
  res.send("Public Route — No Authentication Required");
});

app.listen(5000, () => console.log("Server running on http://localhost:5000"));
